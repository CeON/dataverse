<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--
    If you are doing more than bumping the version number, please read
    doc/sphinx-guides/source/developers/dependencies.rst	
    -->
    <groupId>edu.harvard.iq</groupId>
    <artifactId>dataverse-parent</artifactId>
    <version>4.11</version>
    <packaging>pom</packaging>

    <name>dataverse-parent</name>

    <properties>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <additionalparam>-Xdoclint:none</additionalparam>
        <!-- Needed to avoid IDEA IDE compilation failures. See commits in GH #5059 -->
        <compilerArgument></compilerArgument>
        <project.timezone>UTC</project.timezone>
        <project.language>en</project.language>
        <project.region>US</project.region>
        <!--
            Moving this from plugin config to global config, because of GH-5122.
            This seems to play well with NetBeans 8.2, IDEA 2018.1 and mvn including compatibility with JaCoCo.
        -->
        <argLine>-Duser.timezone=${project.timezone} -Dfile.encoding=${project.build.sourceEncoding}
            -Duser.language=${project.language} -Duser.region=${project.region}
        </argLine>

        <aws.version>1.11.538</aws.version>
        <jackson.version>2.9.6</jackson.version>
        <commons.logging.version>1.2</commons.logging.version>
        <httpcomponents.client.version>4.5.5</httpcomponents.client.version>
        <duracloud.version>4.4.6</duracloud.version>

        <junit.version>4.12</junit.version>
        <junit.jupiter.version>5.3.1</junit.jupiter.version>
        <junit.vintage.version>5.3.1</junit.vintage.version>
        <junit.platform.version>1.3.1</junit.platform.version>
        <junit.test.plugin.version>3.0.0-M1</junit.test.plugin.version>
        <mockito.version>2.22.0</mockito.version>
        <!--
        Jacoco 0.8.2 seems to break Netbeans code coverage integration so we'll use 0.8.1 instead.
        See https://github.com/jacoco/jacoco/issues/772 for discussion of how the XML changed.
        -->
        <jacoco.version>0.8.1</jacoco.version>
    </properties>

    <!--Maven checks for dependendies from these repos in the order shown in the pom.xml
        This isn't well documented and seems to change between maven versions -MAD 4.9.4 -->
    <repositories>
        <repository>
            <id>central-repo</id>
            <name>Central Repository</name>
            <url>http://repo1.maven.org/maven2</url>
            <layout>default</layout>
        </repository>
        <repository>
            <id>prime-repo</id>
            <name>PrimeFaces Maven Repository</name>
            <url>http://repository.primefaces.org</url>
            <layout>default</layout>
        </repository>
        <repository>
            <id>dataone.org</id>
            <url>http://maven.dataone.org</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>dvn.private</id>
            <name>Local repository for hosting jars not available from network repositories.</name>
            <url>file://${project.basedir}/local_lib</url>
        </repository>
    </repositories>

    <modules>
        <module>dataverse-persistence</module>
        <module>dataverse-webapp</module>
    </modules>


    <!-- Transitive dependencies, bigger library "bill of materials" (BOM) and
         versions of dependencies used both directly and transitive are managed here. -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-bom</artifactId>
                <version>${aws.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <!-- Named Entity Recognition -->
            <dependency>
                <groupId>org.apache.opennlp</groupId>
                <artifactId>opennlp-tools</artifactId>
                <version>1.9.1</version>
            </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>${commons.logging.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpcomponents.client.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>1.4.1.Final</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.dom4j</groupId>
                <artifactId>dom4j</artifactId>
                <version>2.1.1</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Declare any DIRECT dependencies here.
         In case the depency is both transitive and direct (e. g. some common lib for logging),
         manage the version above and add the direct dependency here WITHOUT version tag, too.
    -->
    <dependencies>
    
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${junit.vintage.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- BEGIN Data Deposit API v1 (SWORD v2) -->
        <dependency>
            <groupId>org.swordapp</groupId>
            <artifactId>sword2-server</artifactId>
            <version>1.0</version>
            <type>jar</type>
            <classifier>classes</classifier>
            <exclusions>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.swordapp</groupId>
            <artifactId>sword2-server</artifactId>
            <!--
            Built from https://github.com/IQSS/swordv2-java-server-library
            to return a proper SWORD error message rather than a Glassfish
            Exception per https://github.com/IQSS/dataverse/issues/893
            If the fix is merged upstream at
            https://github.com/swordapp/JavaServer2.0/issues/6
            we can switch back to the official SWORD library.
            -->
            <version>1.1-SNAPSHOT</version>
            <type>war</type>
            <exclusions>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xercesImpl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- END Data Deposit API v1 (SWORD v2) -->
        
        <!-- fits.jar, not available from network repos, supplied in local_lib -->
        <dependency>
            <groupId>nom.tam.fits</groupId>
            <artifactId>fits</artifactId>
            <version>2012-10-25-generated</version>
        </dependency>
        <dependency>
            <groupId>net.handle</groupId>
            <artifactId>handle</artifactId>
            <version>8.1.1</version>
        </dependency>
        <!-- UNF v5 (buggy), (temporarily) added for testing ingest against DVN v3  - L.A. -->
        <dependency>
            <groupId>edu.harvard.iq.dvn</groupId>
            <artifactId>unf5</artifactId>
            <version>5.0</version>
        </dependency>
        <!-- (new) UNF v6: -->
        <dependency>
            <groupId>org.dataverse</groupId>
            <artifactId>unf</artifactId>
            <version>6.0</version>
        </dependency>
        <!-- Added for AutoService -->
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>1.0-rc2</version>
            <optional>true</optional>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>edu.harvard.hul.ois.jhove</groupId>
            <artifactId>jhove</artifactId>
            <version>1.11.0</version>
        </dependency>
        <dependency>
            <groupId>edu.harvard.hul.ois.jhove</groupId>
            <artifactId>jhove-module</artifactId>
            <version>1.11.0</version>
        </dependency>
        <dependency>
            <groupId>edu.harvard.hul.ois.jhove</groupId>
            <artifactId>jhove-handler</artifactId>
            <version>1.11.0</version>
        </dependency>
        
        <!-- EXPERIMENTAL: -->
        <!-- lyncode xoai OAI-PMH implementation: -->
        <!-- unfortunately, their 4.10 version -->
        <!-- is still buggy. As an experiment, I'm using -->
        <!-- a patched version I built locally. -->
        <!-- (pull requests pending - L.A. -->
        <dependency>
            <groupId>com.lyncode</groupId>
            <artifactId>xoai-common</artifactId>
            <version>4.1.0-header-patch</version>
        </dependency>
        <dependency>
            <groupId>com.lyncode</groupId>
            <artifactId>xoai-data-provider</artifactId>
            <version>4.1.0-header-patch</version>
        </dependency>
        <dependency>
            <groupId>com.lyncode</groupId>
            <artifactId>xoai-service-provider</artifactId>
            <version>4.1.0-header-patch</version>
        </dependency>
    
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/firstNames/*.*</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArguments>
                        <endorseddirs>${endorsed.dir}</endorseddirs>
                    </compilerArguments>
                    <!-- for use with `mvn -DcompilerArgument=-Xlint:unchecked compile` -->
                    <compilerArgument>${compilerArgument}</compilerArgument>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <attachClasses>true</attachClasses>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>jacoco-initialize</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-site</id>
                        <phase>package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>4.0.0</version>
            </plugin>
            <plugin>
                <!-- https://stackoverflow.com/questions/46177921/how-to-run-unit-tests-in-excludedgroups-in-maven -->
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${junit.test.plugin.version}</version>
                <configuration>
                    <!-- testsToExclude come from the profile-->
                    <excludedGroups>${testsToExclude}</excludedGroups>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${junit.test.plugin.version}</version>
                <executions>
                    <execution>
                        <id>run-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <reuseForks>false</reuseForks>
                            <groups>edu.harvard.iq.dataverse.ArquillianIntegrationTests</groups>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${junit.test.plugin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <!-- https://stackoverflow.com/questions/11824328/default-build-profile-for-maven -->
                <!-- We set dev to true to developers don't have to run non-essential tests over and over. -->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <testsToExclude>edu.harvard.iq.dataverse.NonEssentialTests</testsToExclude>
            </properties>
        </profile>
        <profile>
            <id>all-unit-tests</id>
        </profile>
        <!-- TODO: Add a profile to run API tests (integration tests that end in IT.java. See conf/docker-aio/run-test-suite.sh -->
    </profiles>
</project>

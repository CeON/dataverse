# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, The President & Fellows of Harvard College
# This file is distributed under the same license as the Dataverse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dataverse 4.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-13 16:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/developers/version-control.rst:7
msgid "Version Control"
msgstr ""

#: ../../source/developers/version-control.rst:9
msgid ""
"The Dataverse Project uses git for version control and GitHub for "
"hosting. On this page we'll explain where to find the code, our branching"
" strategey, advice on how to make a pull request, and other git tips."
msgstr ""

#: ../../source/developers/version-control.rst:16
msgid "Where to Find the Dataverse Code"
msgstr ""

#: ../../source/developers/version-control.rst:18
msgid ""
"The main Dataverse code at https://github.com/CeON/dataverse but as "
"explained in the :doc:`intro` section under \"Related Projects\", there "
"are many other code bases you can hack on if you wish!"
msgstr ""

#: ../../source/developers/version-control.rst:21
msgid "Branching Strategy"
msgstr ""

#: ../../source/developers/version-control.rst:24
msgid "Goals"
msgstr ""

#: ../../source/developers/version-control.rst:26
msgid "The goals of the Dataverse branching strategy are:"
msgstr ""

#: ../../source/developers/version-control.rst:28
msgid "allow for concurrent development"
msgstr ""

#: ../../source/developers/version-control.rst:29
msgid "only ship stable code"
msgstr ""

#: ../../source/developers/version-control.rst:31
msgid ""
"We follow a simplified \"git flow\" model described at "
"http://nvie.com/posts/a-successful-git-branching-model/ involving a "
"\"master\" branch, a \"develop\" branch, and feature branches such as "
"\"1234-bug-fix\"."
msgstr ""

#: ../../source/developers/version-control.rst:34
msgid "Branches"
msgstr ""

#: ../../source/developers/version-control.rst:37
msgid "The \"master\" Branch"
msgstr ""

#: ../../source/developers/version-control.rst:39
msgid ""
"The \"`master <https://github.com/CeON/dataverse/tree/master>`_\" branch "
"represents released versions of Dataverse. As mentioned in the :doc"
":`making-releases` section, at release time we update the master branch "
"to include all the code for that release. Commits are never made directly"
" to master. Rather, master is updated only when we merge code into it "
"from the \"develop\" branch."
msgstr ""

#: ../../source/developers/version-control.rst:42
msgid "The \"develop\" Branch"
msgstr ""

#: ../../source/developers/version-control.rst:44
msgid ""
"The \"`develop <https://github.com/CeON/dataverse>`_\" branch represents "
"code that was stable enough to merge from a \"feature\" branch and that "
"will make it into the next release. Like master, commits are never made "
"to the develop branch. The develop branch is where integration occurs. "
"Your goal is have your code merged into the develop branch after it has "
"been reviewed."
msgstr ""

#: ../../source/developers/version-control.rst:47
msgid "Feature Branches"
msgstr ""

#: ../../source/developers/version-control.rst:49
msgid ""
"Feature branches are used for both developing features and fixing bugs. "
"They are named after the GitHub issue they are meant to address, so "
"create a GitHub issue if you need to."
msgstr ""

#: ../../source/developers/version-control.rst:51
msgid ""
"\"{USERNAME}_3728_doc_apipolicy_fix\" is an example of a fine name for "
"your feature branch. It tells us that you are addressing "
"https://github.com/IQSS/dataverse/issues/3728 and the \"slug\" is short, "
"descriptive."
msgstr ""

#: ../../source/developers/version-control.rst:54
msgid "How to Make a Pull Request"
msgstr ""

#: ../../source/developers/version-control.rst:56
msgid ""
"Pull requests take all shapes and sizes, from a one-character typo fix to"
" hundreds of files changing at once. Generally speaking, smaller pull "
"requests are better so that they are easier to code review. That said, "
"don't hold back on writing enough code or documentation to address the "
"issue to the best of your ability."
msgstr ""

#: ../../source/developers/version-control.rst:58
msgid ""
"If you are writing code (rather than documentation), please see "
":doc:`testing` for guidance on writing tests."
msgstr ""

#: ../../source/developers/version-control.rst:60
msgid ""
"The example of creating a pull request presented in this section and its "
"subsections has to do with fixing an important issue with the "
":doc:`documentation` but applies to fixing code as well."
msgstr ""

#: ../../source/developers/version-control.rst:63
msgid "Find or Create a GitHub Issue"
msgstr ""

#: ../../source/developers/version-control.rst:65
msgid ""
"For guidance on which issue to work on, please ask! Also, see "
"https://github.com/CeON/dataverse/blob/develop/CONTRIBUTING.md"
msgstr ""

#: ../../source/developers/version-control.rst:67
msgid ""
"Let's say you want to tackle "
"https://github.com/IQSS/dataverse/issues/3728 which points out a typo in "
"a page of Dataverse's documentation."
msgstr ""

#: ../../source/developers/version-control.rst:70
msgid "Create a New Branch off the develop Branch"
msgstr ""

#: ../../source/developers/version-control.rst:72
msgid ""
"Always create your feature branch from the latest code in develop, "
"pulling the latest code if necessary. Your branch should have a name like"
" \"{USERNAME}_3728_doc_apipolicy_fix\" that starts with the nickname, "
"then issue number you are addressing, and ends with a short, descriptive "
"name. Underscores (\"_\") in your branch name are ok, but please try to "
"avoid other special characters such as ampersands (\"&\") than have "
"special meaning in Unix shells."
msgstr ""

#: ../../source/developers/version-control.rst:75
msgid "Commit Your Change to Your New Branch"
msgstr ""

#: ../../source/developers/version-control.rst:77
msgid ""
"Making a commit (or several commits) to that branch. Ideally the first "
"line of your commit message includes the number of the issue you are "
"addressing, such as ``Fixed BlockedApiPolicy #3728``."
msgstr ""

#: ../../source/developers/version-control.rst:80
msgid "Push Your Branch to GitHub"
msgstr ""

#: ../../source/developers/version-control.rst:82
msgid ""
"Push your feature branch to your fork of Dataverse. Your git command may "
"look something like ``git push origin "
"{USERNAME}_3728_doc_apipolicy_fix``."
msgstr ""

#: ../../source/developers/version-control.rst:85
msgid "Make a Pull Request"
msgstr ""

#: ../../source/developers/version-control.rst:87
msgid ""
"Make a pull request to get approval to merge your changes into the "
"develop branch."
msgstr ""

#: ../../source/developers/version-control.rst:90
msgid "How to Resolve Conflicts in Your Pull Request"
msgstr ""

#: ../../source/developers/version-control.rst:92
msgid ""
"Unfortunately, pull requests can quickly become \"stale\" and unmergable "
"as other pull requests are merged into the develop branch ahead of you. "
"This is completely normal, and often occurs because other developers made"
" their pull requests before you did."
msgstr ""

#: ../../source/developers/version-control.rst:94
msgid ""
"The Dataverse team may ping you to ask you to merge the latest from the "
"develop branch into your branch and resolve merge conflicts."
msgstr ""

#: ../../source/developers/version-control.rst:96
msgid "Here are some steps to do so that make use of GitHub Desktop and Netbeans."
msgstr ""

#: ../../source/developers/version-control.rst:98
#: ../../source/developers/version-control.rst:113
msgid "**In GitHub Desktop:**"
msgstr ""

#: ../../source/developers/version-control.rst:100
msgid "Sync from develop."
msgstr ""

#: ../../source/developers/version-control.rst:101
msgid "Open the specific branch that's having the merge conflict."
msgstr ""

#: ../../source/developers/version-control.rst:102
msgid "Click \"Update from develop\"."
msgstr ""

#: ../../source/developers/version-control.rst:104
msgid "**In Netbeans:**"
msgstr ""

#: ../../source/developers/version-control.rst:106
msgid ""
"Click Window -> Favorites and open your local Dataverse project folder in"
" the Favorites panel."
msgstr ""

#: ../../source/developers/version-control.rst:107
msgid ""
"In this file browser, you can follow the red cylinder icon to find files "
"with merge conflicts."
msgstr ""

#: ../../source/developers/version-control.rst:108
msgid "Double click the red merge conflicted file."
msgstr ""

#: ../../source/developers/version-control.rst:109
msgid ""
"Right click on the red tab for that file and select Git -> Resolve "
"Conflicts."
msgstr ""

#: ../../source/developers/version-control.rst:110
msgid ""
"Resolve on right or left (if you select \"both\" you can do finer edits "
"after)."
msgstr ""

#: ../../source/developers/version-control.rst:111
msgid "Save all changes"
msgstr ""

#: ../../source/developers/version-control.rst:115
msgid ""
"Commit the merge (append issue number to end, e.g. #3728) and leave note "
"about what was resolved."
msgstr ""

#: ../../source/developers/version-control.rst:117
msgid "**In GitHub Issues:**"
msgstr ""

#: ../../source/developers/version-control.rst:119
msgid ""
"Leave a comment for the Dataverse team that you have resolved the merge "
"conflicts."
msgstr ""

#: ../../source/developers/version-control.rst:122
msgid "Adding Commits to a Pull Request from a Fork"
msgstr ""

#: ../../source/developers/version-control.rst:124
msgid ""
"By default, when a pull request is made from a fork, \"Allow edits from "
"maintainers\" is checked as explained at https://help.github.com/articles"
"/allowing-changes-to-a-pull-request-branch-created-from-a-fork/"
msgstr ""

#: ../../source/developers/version-control.rst:126
msgid ""
"This is a nice feature of GitHub because it means that the core dev team "
"for Dataverse can make small (or even large) changes to a pull request "
"from a contributor to help the pull request along on its way to QA and "
"being merged."
msgstr ""

#: ../../source/developers/version-control.rst:128
msgid ""
"GitHub documents how to make changes to a fork at "
"https://help.github.com/articles/committing-changes-to-a-pull-request-"
"branch-created-from-a-fork/ but as of this writing the steps involve "
"making a new clone of the repo. This works but you might find it more "
"convenient to add a \"remote\" to your existing clone. The following "
"example uses the fork at https://github.com/OdumInstitute/dataverse and "
"the branch ``4709-postgresql_96`` but the technique can be applied to any"
" fork and branch:"
msgstr ""

#: ../../source/developers/version-control.rst:141
msgid "Previous: :doc:`troubleshooting` | Next: :doc:`sql-upgrade-scripts`"
msgstr ""


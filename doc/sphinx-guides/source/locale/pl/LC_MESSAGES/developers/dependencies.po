# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, The President & Fellows of Harvard College
# This file is distributed under the same license as the Dataverse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dataverse 4.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-13 16:40+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/developers/dependencies.rst:7
msgid "Dependency Management"
msgstr ""

#: ../../source/developers/dependencies.rst:12
msgid ""
"Dataverse is (currently) a Java EE 7 based application, that uses a lot "
"of additional libraries for special purposes. This includes features like"
" support for SWORD-API, S3 storage and many others."
msgstr ""

#: ../../source/developers/dependencies.rst:15
msgid ""
"Besides the code that glues together the single pieces, any developer "
"needs to describe used dependencies for the Maven-based build system. As "
"is familiar to any Maven user, this happens inside the \"Project Object "
"Model\" (POM) living in ``pom.xml`` at the root of the project "
"repository. Recursive and convergent dependency resolution makes "
"dependency management with Maven very easy. But sometimes, in projects "
"with many complex dependencies like Dataverse, you have to help Maven "
"make the right choices."
msgstr ""

#: ../../source/developers/dependencies.rst:22
msgid "Terms"
msgstr ""

#: ../../source/developers/dependencies.rst:24
msgid "As a developer, you should familiarize yourself with the following terms:"
msgstr ""

#: ../../source/developers/dependencies.rst:26
msgid ""
"**Direct dependencies**: things *you use* yourself in your own code for "
"Dataverse."
msgstr ""

#: ../../source/developers/dependencies.rst:27
msgid ""
"**Transitive dependencies**: things *others use* for things you use, "
"pulled in recursively. See also: `Maven docs "
"<https://maven.apache.org/guides/introduction/introduction-to-dependency-"
"mechanism.html#Transitive_Dependencies>`_."
msgstr ""

#: ../../source/developers/dependencies.rst:57
msgid "Direct dependencies"
msgstr ""

#: ../../source/developers/dependencies.rst:59
msgid ""
"Within the POM, any direct dependencies reside within the "
"``<dependencies>`` tag:"
msgstr ""

#: ../../source/developers/dependencies.rst:73
msgid ""
"Anytime you add a ``<dependency>``, Maven will try to fetch it from "
"defined/configured repositories and use it within the build lifecycle. "
"You have to define a ``<version>``, but ``<scope>`` is optional for "
"``compile``. (See `Maven docs: Dep. Scope "
"<https://maven.apache.org/guides/introduction/introduction-to-dependency-"
"mechanism.html#Dependency_Scope>`_)"
msgstr ""

#: ../../source/developers/dependencies.rst:78
msgid ""
"During fetching, Maven will analyse all transitive dependencies (see "
":numref:`direct_and_transitive_dependency_graph`) and, if necessary, "
"fetch those, too. Everything downloaded once is cached locally by "
"default, so nothing needs to be fetched again and again, as long as the "
"dependency definition does not change."
msgstr ""

#: ../../source/developers/dependencies.rst:82
msgid "**Rules to follow:**"
msgstr ""

#: ../../source/developers/dependencies.rst:84
msgid ""
"You should only use direct dependencies for **things you are actually "
"using** in your code."
msgstr ""

#: ../../source/developers/dependencies.rst:85
msgid ""
"**Clean up** direct dependencies no longer in use. It will bloat the "
"deployment package otherwise!"
msgstr ""

#: ../../source/developers/dependencies.rst:86
msgid ""
"Care about the **scope**. Do not include \"testing only\" dependencies in"
" the package - it will hurt you in IDEs and bloat things. [#f1]_"
msgstr ""

#: ../../source/developers/dependencies.rst:87
msgid ""
"Avoid using different dependencies for the **same purpose**, e. g. "
"different JSON parsing libraries."
msgstr ""

#: ../../source/developers/dependencies.rst:88
msgid "Refactor your code to **use Java EE** standards as much as possible."
msgstr ""

#: ../../source/developers/dependencies.rst:89
msgid ""
"When you rely on big SDKs or similar big cool stuff, try to **include the"
" smallest portion possible**. Complete SDK bundles are typically "
"heavyweight and most of the time unnecessary."
msgstr ""

#: ../../source/developers/dependencies.rst:91
msgid "**Don't include transitive dependencies.** [#f2]_"
msgstr ""

#: ../../source/developers/dependencies.rst:93
msgid ""
"Exception: if you are relying on it in your code (see *Z* in "
":numref:`direct_and_transitive_dependency_graph`), you must declare it. "
"See :ref:`transitive_dependencies` for proper handling in these (rare) "
"cases."
msgstr ""

#: ../../source/developers/dependencies.rst:100
msgid "Transitive dependencies"
msgstr ""

#: ../../source/developers/dependencies.rst:102
msgid ""
"Maven is comfortable for developers; it handles recursive resolution, "
"downloading, and adding \"dependencies of dependencies\". However, as "
"life is a box of chocolates, you might find yourself in *version conflict"
" hell* sooner than later without even knowing, but experiencing "
"unintended side effects."
msgstr ""

#: ../../source/developers/dependencies.rst:106
msgid ""
"When you look at the :numref:`direct_and_transitive_dependency_graph`, "
"imagine *B* and *TB* rely on different *versions* of *TC*. How does Maven"
" decide which version it will include? Easy: the dependent version of the"
" nearest version wins:"
msgstr ""

#: ../../source/developers/dependencies.rst:127
msgid ""
"In this case, version \"2.0\" will be included. If you know something "
"about semantic versioning, a red alert should ring in your mind right "
"now. How do we know that *B* is compatible with *Z v2.0* when depending "
"on *Z v1.0*?"
msgstr ""

#: ../../source/developers/dependencies.rst:130
msgid ""
"Another scenario getting us in trouble: indirect use of transitive "
"dependencies. Imagine the following: we rely on *Z* in our code, but do "
"not include a direct dependency for it within the POM. Now *B* is updated"
" and removed its dependency on *Z*. You definitely don't want to head "
"down that road."
msgstr ""

#: ../../source/developers/dependencies.rst:134
msgid "**Follow the rules to be safe:**"
msgstr ""

#: ../../source/developers/dependencies.rst:136
msgid ""
"Do **not use transitive deps implicit**: add a direct dependency for "
"transitive deps you re-use in your code."
msgstr ""

#: ../../source/developers/dependencies.rst:137
msgid "On every build check that no implicit usage was added by accident."
msgstr ""

#: ../../source/developers/dependencies.rst:138
msgid ""
"**Explicitly declare versions** of transitive dependencies in use by "
"multiple direct dependencies."
msgstr ""

#: ../../source/developers/dependencies.rst:139
msgid ""
"On every build check that there are no convergence problems hiding in the"
" shadows."
msgstr ""

#: ../../source/developers/dependencies.rst:140
msgid ""
"**Do special tests** on every build to verify these explicit combinations"
" work."
msgstr ""

#: ../../source/developers/dependencies.rst:143
msgid "Managing transitive dependencies in ``pom.xml``"
msgstr ""

#: ../../source/developers/dependencies.rst:145
msgid "Maven can manage versions of transitive dependencies in four ways:"
msgstr ""

#: ../../source/developers/dependencies.rst:147
msgid ""
"Make a transitive-only dependency not used in your code a direct one and "
"add a ``<version>`` tag. Typically a bad idea, don't do that."
msgstr ""

#: ../../source/developers/dependencies.rst:149
msgid ""
"Use ``<optional>`` or ``<exclusion>`` tags on direct dependencies that "
"request the transitive dependency. *Last resort*, you really should avoid"
" this. Not explained or used here. `See Maven docs "
"<https://maven.apache.org/guides/introduction/introduction-to-optional-"
"and-excludes-dependencies.html>`_."
msgstr ""

#: ../../source/developers/dependencies.rst:152
msgid ""
"Explicitly declare the transitive dependency in "
"``<dependencyManagement>`` and add a ``<version>`` tag."
msgstr ""

#: ../../source/developers/dependencies.rst:153
msgid ""
"For more complex transitive dependencies, reuse a \"Bill of Materials\" "
"(BOM) within ``<dependencyManagement>`` and add a ``<version>`` tag. Many"
" bigger and standard use projects provide those, making the POM much less"
" bloated compared to adding every bit yourself."
msgstr ""

#: ../../source/developers/dependencies.rst:157
msgid ""
"A reduced example, only showing bits relevant to these cases and usage of"
" an explicit transitive dep directly:"
msgstr ""

#: ../../source/developers/dependencies.rst:227
msgid "Helpful tools"
msgstr ""

#: ../../source/developers/dependencies.rst:229
msgid ""
"Maven provides some plugins that are of great help to detect possible "
"conflicts and implicit usage."
msgstr ""

#: ../../source/developers/dependencies.rst:231
msgid ""
"For *implicit usage detection*, use `mvn dependency:analyze`. Examine the"
" output with great care. Sometimes you will see implicit usages that do "
"no harm, especially if you are using bigger SDKs having some kind of "
"`core` package. This will also report on any direct dependency which is "
"not in use and can be removed from the POM. Again, do this with great "
"caution and double check."
msgstr ""

#: ../../source/developers/dependencies.rst:236
msgid ""
"If you want to see the dependencies both direct and transitive in a "
"*dependency tree format*, use `mvn dependency:tree`."
msgstr ""

#: ../../source/developers/dependencies.rst:238
msgid ""
"This will however not help you with detecting possible version conflicts."
" For this you need to use the `Enforcer Plugin "
"<https://maven.apache.org/enforcer/maven-enforcer-plugin/index.html>`_ "
"with its built in `dependency convergence rule "
"<https://maven.apache.org/enforcer/enforcer-"
"rules/dependencyConvergence.html>`_."
msgstr ""

#: ../../source/developers/dependencies.rst:243
msgid "Repositories"
msgstr ""

#: ../../source/developers/dependencies.rst:245
msgid ""
"Maven receives all dependencies from *repositories*. Those can be public "
"like `Maven Central <https://search.maven.org/>`_ and others, but you can"
" also use a private repository on premises or in the cloud. Last but not "
"least, you can use local repositories, which can live next to your "
"application code (see ``local_lib`` dir within Dataverse codebase)."
msgstr ""

#: ../../source/developers/dependencies.rst:249
msgid "Repositories are defined within the Dataverse POM like this:"
msgstr ""

#: ../../source/developers/dependencies.rst:273
msgid ""
"You can also add repositories to your local `Maven settings "
"<https://maven.apache.org/ref/3.6.0/maven-settings/settings.html>`_."
msgstr ""

#: ../../source/developers/dependencies.rst:275
msgid ""
"Typically you will skip the addition of the central repository, but "
"adding it to the POM has the benefit that dependencies are first looked "
"up there (which in theory can speed up downloads). You should keep in "
"mind that repositories are used in the order they appear."
msgstr ""

#: ../../source/developers/dependencies.rst:282
msgid "Footnotes"
msgstr ""

#: ../../source/developers/dependencies.rst:283
msgid ""
"Modern IDEs import your Maven POM and offer import autocompletion for "
"classes based on direct dependencies in the model. You might end up using"
" legacy or repackaged classes because of a wrong scope."
msgstr ""

#: ../../source/developers/dependencies.rst:284
msgid ""
"This is going to bite back in modern IDEs when importing classes from "
"transitive dependencies by \"autocompletion accident\"."
msgstr ""

#: ../../source/developers/dependencies.rst:288
msgid "Previous: :doc:`documentation` | Next: :doc:`debugging`"
msgstr ""


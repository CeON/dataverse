# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, The President & Fellows of Harvard College
# This file is distributed under the same license as the Dataverse package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dataverse 4.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-20 18:16+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/user/tabulardataingest/csv-tsv.rst:2
msgid "CSV/TSV"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:5
msgid "|toctitle|"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:8
msgid ""
"Ingest of Comma-Separated Values and Tab-Separated Values files as "
"tabular data."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:10
msgid ""
"Dataverse will make an attempt to turn CSV and TSV files uploaded by the "
"user into tabular data, using the `Apache CSV parser "
"<https://commons.apache.org/proper/commons-csv/>`_."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:13
msgid "Main formatting requirements"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:15
msgid ""
"The first row in the document will be treated as the CSV's header, "
"containing variable names for each column."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:17
msgid ""
"Each following row must contain the same number of comma-separated values"
" (\"cells\") as that header."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:19
msgid ""
"As of the Dataverse 4.8 release, we allow ingest of CSV files with commas"
" and line breaks within cells. A string with any number of commas and "
"line breaks enclosed within double quotes is recognized as a single cell."
" Double quotes can be encoded as two double quotes in a row (``\"\"``)."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:21
msgid "For example, the following lines:"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:28
msgid ""
"are recognized as a **single** row with **5** comma-separated values "
"(cells):"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:38
msgid "(where ``\\n`` is a new line character)"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:42
msgid "Limitations"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:44
msgid ""
"Compared to other formats, relatively little information about the data "
"(\"variable-level metadata\") can be extracted from a CSV file. Aside "
"from the variable names supplied in the top line, the ingest will make an"
" educated guess about the data type of each comma-separated column. One "
"of the supported rich file formats (Stata, SPSS and R) should be used if "
"you need to provide more descriptive variable-level metadata (variable "
"labels, categorical values and labels, explicitly defined data types, "
"etc.)."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:47
msgid "Recognized data types and formatting"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:49
msgid ""
"The application will attempt to recognize numeric, string, and date/time "
"values in the individual columns."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:52
msgid "For dates, the ``yyyy-MM-dd`` format is recognized."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:54
msgid "For date-time values, the following 2 formats are recognized:"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:56
msgid "``yyyy-MM-dd HH:mm:ss``"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:58
msgid ""
"``yyyy-MM-dd HH:mm:ss z`` (same format as the above, with the time zone "
"specified)"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:60
msgid "For numeric variables, the following special values are recognized:"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:62
msgid "``inf``, ``+inf`` - as a special IEEE 754 \"positive infinity\" value;"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:64
msgid "``NaN`` - as a special IEEE 754 \"not a number\" value;"
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:66
msgid ""
"An empty value (i.e., a comma followed immediately by another comma, or "
"the line end), or ``NA`` - as a *missing value*."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:68
msgid "``null`` - as a numeric *zero*."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:70
msgid ""
"(any combinations of lower and upper cases are allowed in the notations "
"above)."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:72
msgid ""
"In character strings, an empty value (a comma followed by another comma, "
"or the line end) is treated as an empty string (NOT as a *missing "
"value*)."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:74
msgid ""
"Any non-Latin characters are allowed in character string values, **as "
"long as the encoding is UTF8**."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:77
msgid ""
"**Note:** When the ingest recognizes a CSV or TSV column as a numeric "
"vector, or as a date/time value, this information is reflected and saved "
"in the database as the *data variable metadata*. To inspect that "
"metadata, click on the *Download* button next to a tabular data file, and"
" select *Variable Metadata*. This will export the variable records in the"
" DDI XML format. (Alternatively, this metadata fragment can be downloaded"
" via the Data Access API; for example: "
"``http://localhost:8080/api/access/datafile/<FILEID>/metadata/ddi``)."
msgstr ""

#: ../../source/user/tabulardataingest/csv-tsv.rst:79
msgid ""
"The most immediate implication is in the calculation of the UNF "
"signatures for the data vectors, as different normalization rules are "
"applied to numeric, character, and date/time values. (see the "
":doc:`/developers/unf/index` section for more information). If it is "
"important to you that the UNF checksums of your data are accurately "
"calculated, check that the numeric and date/time columns in your file "
"were recognized as such (as ``type=numeric`` and ``type=character, "
"category=date(time)``, respectively). If, for example, a column that was "
"supposed to be numeric is recognized as a vector of character values "
"(strings), double-check that the formatting of the values is consistent. "
"Remember, a single improperly-formatted value in the column will turn it "
"into a vector of character strings, and result in a different UNF. Fix "
"any formatting errors you find, delete the file from the dataset, and try"
" to ingest it again."
msgstr ""

